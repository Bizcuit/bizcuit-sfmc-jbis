import { RecommendationsConfig, recommend } from "recs";
import { UserAttributeLookup, UserAttributeReference, UserSegmentLookup, UserSegmentReference } from "common";

export class Utils {
    static getUserAttributeValue(attribute: UserAttributeReference, user: User){
        if(attribute) {
            return (user?.attributes?.[attribute.id] as Attribute|undefined)?.value?.toString() || "";
        }

        return "";
    }

    static getUserSegments(segments: UserSegmentReference[], user: User){
        let result = "";

        if(segments && segments.length > 0){
            const segmentsList = [];
            segments.forEach(s => {
                const joinDate = user.getSegmentJoinDate(s.id);
                if(joinDate){
                    segmentsList.push(s.label);
                }
            });
            result = segmentsList.join(",");
        }

        return result;
    }

    static getRecommendations(recipeConfig: RecommendationsConfig, context: CampaignComponentContext){
        let resultObjects = [];
        let resultIds = [];

        if(recipeConfig && recipeConfig.recipe && recipeConfig.recipe.id){
            const recs = recommend(context, recipeConfig);
            
            recs?.forEach(item => {
                resultIds.push(item.id);

                resultObjects.push({
                    id: item.id,
                    name: item?.attributes?.["name"]?.value?.toString(),
                    imageUrl: item?.attributes?.["imageUrl"]?.value?.toString(),
                    url: item?.attributes?.["url"]?.value?.toString(),
                    inventoryCount: item?.attributes?.["inventoryCount"]?.value?.toString(),
                    price: item?.attributes?.["price"]?.value?.toString()
                });
            });
        }

        //return JSON.stringify(resultObjects);
        return resultIds.join(",");
    }
}

export class JourneyBuilderPayload {
    @title("Include recommendations")
    includeRecommendations: boolean = false;

    @shownIf(this, self => self.includeRecommendations)
    @title(" ")
    recipeConfig: RecommendationsConfig = new RecommendationsConfig()
        .restrictItemType("Product")
        .restrictMaxResults(4);

    @title("User Attributes:")
    @lookupOptions(() => new UserAttributeLookup())
    attributes: UserAttributeReference[];

    @title("Segments:")
    @lookupOptions(() => new UserSegmentLookup())
    segments: UserSegmentReference[];
    
    getPayload(context: CampaignComponentContext){
        let result = {
            campaign: context.campaignId,
            experience: context.experienceId,
            userGroup: context.userGroup,
        };

        this.attributes?.forEach(attr => {
            result["attribute_" + attr.id] = Utils.getUserAttributeValue(attr, context.user);
        });

        result["segments"] = Utils.getUserSegments(this.segments, context.user);
        result["recommendations"] = this.includeRecommendations == true ? Utils.getRecommendations(this.recipeConfig, context) : "";
        return result;
    }
}


export class JourneyBuilderTemplate implements CampaignTemplateComponent {
    @title(" ")
    templateConfig: JourneyBuilderPayload;

    run(context: CampaignComponentContext) {
        const result = this.templateConfig ? this.templateConfig.getPayload(context) : {};
        
        return {
            jbis: result
        };
    }
}